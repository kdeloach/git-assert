#!/usr/bin/env python
"""
Make assertions about one or more git repositories.

For example, to assert that a repository is on the "master" branch run
"git-assert --branch=master sample-project/".

Failed assertions output to stderr and exit with code 1.
"""
import argparse
import fileinput
import os
import subprocess
import sys


def git_assert_unstaged_changes(path):
    """
    Return True if there are no unstaged changes.
    """
    passed = True
    output = subprocess.check_output(['git', 'status', '--short'], cwd=path)
    for line in output.splitlines():
        if line.startswith(' M '):
            unstaged_file = line.replace(' M ', '')
            sys.stderr.write('{}: unstaged changes for "{}"\n'.format(
                path, unstaged_file))
            passed = False
    return passed


def git_assert_branch(path, expected):
    """
    Return True if branch names match.
    """
    output = subprocess.check_output(['git', 'branch'], cwd=path)
    for line in output.splitlines():
        if line.startswith('*'):
            actual = line.replace('* ', '')
            if actual == expected:
                return True
            sys.stderr.write('{}: expected branch to be "{}" but it was "{}"\n'.format(
                path, expected, actual))
            return False
    sys.stderr.write('{}: could not detect branch\n'.format(path))
    return False


def git_assert_path(path, branch=None, unstaged_changes=False):
    passed = True

    # Skip tests if path doesn't exist
    if not os.path.isdir(path):
        sys.stderr.write('{}: not a valid directory\n'.format(path))
        return False

    # Skip tests if path not valid git repository
    if not os.path.isdir(os.path.join(path, '.git')):
        sys.stderr.write('{}: not a valid git repository\n'.format(path))
        return False

    if branch:
        passed &= git_assert_branch(path, branch)

    if unstaged_changes:
        passed &= git_assert_unstaged_changes(path)

    return passed


def resolve_absolute_paths(paths):
    for path in paths:
        yield os.path.abspath(os.path.expanduser(path.strip()))


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--branch', help='branch name')
    parser.add_argument('--unstaged-changes', action='store_true',
                        help='check for unstaged changes')
    parser.add_argument('path', nargs='+',
                        help='path to local git repository (use "-" to read from stdin)')

    args = parser.parse_args()

    # Read from stdin if first path is "-"
    if args.path[0] == '-':
        args.path = fileinput.input('-')

    passed = True
    paths = resolve_absolute_paths(args.path)
    for path in paths:
        passed &= git_assert_path(path,
                                  args.branch,
                                  args.unstaged_changes)

    if passed:
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == '__main__':
    main()
