#!/usr/bin/env python
"""
Make assertions about a git repository.

For example, to assert that a repository is on the "master" branch run:
$ git-assert sample-project/ --branch=master

Failed assertions output to stderr and exit with code 1.
"""
import argparse
import os
import subprocess
import sys


VERSION = '2.0.0'


def git_assert_no_unstaged_changes(path):
    """
    Return True if there are no unstaged changes.
    """
    passed = True
    output = subprocess.check_output(['git', 'status', '--short'], cwd=path)
    for line in output.splitlines():
        if line.startswith(' M '):
            unstaged_file = line.replace(' M ', '')
            sys.stderr.write('{}: unstaged changes detected for file "{}"\n'.format(
                path, unstaged_file))
            passed = False
    return passed


def git_assert_branch(path, expected):
    """
    Return True if branch names match.
    """
    output = subprocess.check_output(['git', 'branch'], cwd=path)
    for line in output.splitlines():
        if line.startswith('*'):
            actual = line.replace('* ', '')
            if actual == expected:
                return True
            sys.stderr.write('{}: expected branch to be "{}" but it was "{}"\n'.format(
                path, expected, actual))
            return False
    sys.stderr.write('{}: could not detect branch\n'.format(path))
    return False


def git_assert_path(path, branch=None, no_unstaged_changes=False):
    passed = True

    # Skip tests if path doesn't exist
    if not os.path.isdir(path):
        sys.stderr.write('{}: not a valid directory\n'.format(path))
        return False

    # Skip tests if path not valid git repository
    if not os.path.isdir(os.path.join(path, '.git')):
        sys.stderr.write('{}: not a valid git repository\n'.format(path))
        return False

    if branch:
        passed &= git_assert_branch(path, branch)

    if no_unstaged_changes:
        passed &= git_assert_no_unstaged_changes(path)

    return passed


def resolve_absolute_paths(paths):
    for path in paths:
        yield os.path.abspath(os.path.expanduser(path.strip()))


def main():
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-V', '--version', action='store_true', help='display version number')
    parser.add_argument('--branch', help='branch name')
    parser.add_argument('--no-unstaged-changes', action='store_true', help='check for unstaged changes')
    parser.add_argument('path', nargs='?', help='path to local git repository')

    args = parser.parse_args()

    if args.version:
        print('git-assert {}'.format(VERSION))
        sys.exit(0)

    if not args.path:
        parser.error('must specify at least one git repository path')

    path = os.path.abspath(os.path.expanduser(args.path.strip()))
    passed = git_assert_path(path, args.branch, args.no_unstaged_changes)

    if passed:
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == '__main__':
    main()
